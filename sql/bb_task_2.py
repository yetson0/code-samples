# -*- coding: utf-8 -*-
"""BB task 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q6pQtmDH781VtYKl8MxoKA_7aBugZFyK

# Zadanie #2

### 1. Korzystając z biblioteki sqlite3 utwórz nową bazę danych z tabelą FlightLeg, która będzie zawierała informację o lotach samolotów, z następującymi kolumnami: 

·       id — identyfikator numeryczny nadawany z sekwencji 

·       tailNumber — identyfikator samolotu 

·       sourceAirportCode, destinationAirportCode — trzyliterowy kod lotniska (wg IATA) 

·       sourceCountryCode, destinationCountryCode — trzyliterowy kod kraju (wg ISO 3166-1 Alpha-3) 

·       departureTimeUtc, landingTimeUtc — data i czas (z dokładnością do sekundy) odpowiednio odlotu i lądowania samolotu (w UTC)
"""

import sqlite3
import csv
import os
import pandas as pd

# conn=sqlite3.connect('data.db') # -> or 'data.db'
conn=sqlite3.connect(':memory:') # -> or 'data.db'
cur=conn.cursor()

cur.execute("DROP TABLE IF EXISTS FlightLeg")
cur.execute('''
CREATE TABLE "FlightLeg" (
    id INTEGER NOT NULL PRIMARY KEY,
    tailNumber TEXT(6), 
    sourceAirportCode TEXT(3),
    destinationAirportCode TEXT(3),
    sourceCountryCode TEXT(3),
    destinationCountryCode TEXT(3),
    departureTimeUtc DATETIME,
    landingTimeUtc DATETIME
)
''')

"""---

### 2. Wypełnij tabelę FlightLeg danymi z pliku: https://bitpeak.pl/datasets/flightlegs.csv

get .csv file from url into notebook
"""

# initialize & download csv file
if os.path.exists("flightlegs.csv") != True:
  !pip install wget
  import wget
  wget.download("https://bitpeak.pl/datasets/flightlegs.csv")

fname="flightlegs.csv"

with open(fname) as csvfile:
    csv_reader = csv.reader(csvfile, delimiter=";")
    next(csv_reader, None)  # skip the headers
    for row in csv_reader:
        # print (row) # row check
        tail=row[0]
        srcapt=row[1]
        destapt=row[2]
        srcco=row[3]
        destco=row[4]
        dept=row[5]
        arri=row[6]
        cur.execute('''INSERT INTO FlightLeg(tailNumber,sourceAirportCode,destinationAirportCode,sourceCountryCode,destinationCountryCode,departureTimeUtc,landingTimeUtc) VALUES (?,?,?,?,?,?,?)''',(tail,srcapt,srcco,destapt,destco,dept,arri))
        # print (cur.fetchall())
        conn.commit()

#check table sofar
cur.execute("SELECT * FROM FlightLeg")
print(cur.fetchone())

#check by pandas
df = pd.read_sql_query("SELECT * FROM FlightLeg", conn)
print(df)

"""---

### 3. Dodaj do tabeli dwie nowe kolumny: 

·       flightDuration — wypełnij ją wartościami określającymi czas trwania lotu w minutach (zaokrągl wartości do najbliższej liczby całkowitej) 

·       flightType — wypełnij ją wartościami określającymi typ lotu: krajowy (wartość ‘D’ = domestic) lub zagraniczny (wartość ‘I’ = international); lot krajowy to lot zaczynający się i kończący w tym samym kraju

---

·       flightDuration — wypełnij ją wartościami określającymi czas trwania lotu w minutach (zaokrągl wartości do najbliższej liczby całkowitej)
"""

#3.1.1 add column flightDuration
cur.execute("ALTER TABLE FlightLeg ADD COLUMN flightDuration DATETIME")

#3.1.2 UPDATE flightDuration column with minutes rounded
cur.execute("""
UPDATE FlightLeg 
SET flightDuration = CAST(ROUND((julianday(landingTimeUtc)-julianday(departureTimeUtc))*24*60) AS Integer)
""")

"""·       flightType — wypełnij ją wartościami określającymi typ lotu: krajowy (wartość ‘D’ = domestic) lub zagraniczny (wartość ‘I’ = international); lot krajowy to lot zaczynający się i kończący w tym samym kraju"""

#3.2.1 add column flightType
cur.execute("ALTER TABLE FlightLeg ADD COLUMN flightType VARCHAR(1)")

#3.2.2 UPDATE flightType with Domestic flights as 'D' and Intl as 'I'
cur.execute("""
UPDATE FlightLeg
SET flightType = (CASE
  WHEN sourceCountryCode = destinationCountryCode THEN 'D'
  WHEN sourceCountryCode <> destinationCountryCode THEN 'I'
  END)
""")

"""checks:"""

# check DOMESTIC select - TEST
df = pd.read_sql_query("""
SELECT 
  id, tailNumber,sourceCountryCode,destinationCountryCode,flightDuration,flightType
FROM FlightLeg
WHERE flightType = 'D'
""", conn)
print(df)

"""--alternatively UPDATE as single query"""

# single UPDATE flightType with Domestic flights as 'I" in flightType
cur.execute("""
UPDATE FlightLeg
SET flightType='I'
WHERE sourceCountryCode <> destinationCountryCode
""")

# single UPDATE flightType with Domestic flights as 'D" in flightType
cur.execute("""
UPDATE FlightLeg
SET flightType='D'
WHERE sourceCountryCode = destinationCountryCode
""")

"""---

### 4. Zaimplementuj logikę odpowiadającą na poniższe pytania: 

1. Który samolot wykonał najwięcej lotów? 

2. Który samolot przeleciał najwięcej minut? 

3. Który lot, w podziale na krajowe i zagraniczne, był najkrótszy, a który najdłuższy, i ile minut trwał? 

4. (punkt opcjonalny) Ile jest błędnych rekordów opisujących loty, które wskazują, że samolot wykonywał więcej niż jeden lot jednocześnie? Wyświetl wszystkie pary takich konfliktowych lotów. 

5. (punkt opcjonalny) Odstęp pomiędzy którymi lotami tego samego dowolnego samolotu był najkrótszy i ile minut trwał?

---

1. Który samolot wykonał najwięcej lotów?
"""

#4.1 max count
df = pd.read_sql_query("""
SELECT id, tailNumber, COUNT(tailNumber) 
FROM FlightLeg 
GROUP BY tailNumber 
HAVING COUNT(tailNumber) = (SELECT MAX(noFlights) FROM
  (SELECT COUNT(tailNumber) AS noFlights
   FROM FlightLeg
   GROUP BY tailNumber))
""", conn)
print(df)

#4.1 max count 1 occurence only
df = pd.read_sql_query("""
SELECT id, tailNumber, MAX(noFlights) FROM (
SELECT id, tailNumber, COUNT(tailNumber) AS noFlights, SUM(flightDuration) AS minutesFlights
FROM FlightLeg
GROUP BY tailNumber
)
""", conn)
print(df)

#4.1 query -- check
df = pd.read_sql_query("""
SELECT id, tailNumber, COUNT(tailNumber) AS noFlights, SUM(flightDuration) AS minutesFlights
FROM FlightLeg
GROUP BY tailNumber
ORDER BY noFlights DESC
""", conn)
print(df)

"""2. Który samolot przeleciał najwięcej minut?"""

#4.2 max sum
df = pd.read_sql_query("""
SELECT id, tailNumber, MAX(minutesFlights) FROM (
SELECT id, tailNumber, COUNT(tailNumber) AS noFlights, SUM(flightDuration) AS minutesFlights
FROM FlightLeg
GROUP BY tailNumber
)
""", conn)
print(df)

#4.2 query -- check
df = pd.read_sql_query("""
SELECT id, tailNumber, SUM(flightDuration) AS minutesFlights
FROM FlightLeg
GROUP BY tailNumber
ORDER BY minutesFlights DESC
""", conn)
print(df)

"""3. Który lot, w podziale na krajowe i zagraniczne, był najkrótszy, a który najdłuższy, i ile minut trwał?"""

#4.3.1 max - najdluzszy
df = pd.read_sql_query("""
SELECT *
FROM FlightLeg
WHERE (flightType,flightDuration) IN (SELECT flightType, MAX(flightDuration) 
  FROM FlightLeg
  GROUP BY flightType)
""", conn)
print(df)

#4.3.2 min - najkrotszy
df = pd.read_sql_query("""
SELECT *
FROM FlightLeg
WHERE (flightType,flightDuration) IN (SELECT flightType, MIN(flightDuration) 
  FROM FlightLeg
  GROUP BY flightType)
""", conn)
print(df)